{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.paste = paste;\nvar _dom = require(\"@testing-library/dom\");\nvar _utils = require(\"./utils\");\nfunction paste(element, text, init) {\n  let {\n    initialSelectionStart,\n    initialSelectionEnd\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (element.disabled) return;\n  if (typeof element.value === 'undefined') {\n    throw new TypeError(`the current element is of type ${element.tagName} and doesn't have a valid value`);\n  }\n  (0, _utils.eventWrapper)(() => element.focus()); // by default, a new element has it's selection start and end at 0\n  // but most of the time when people call \"paste\", they expect it to paste\n  // at the end of the current input value. So, if the selection start\n  // and end are both the default of 0, then we'll go ahead and change\n  // them to the length of the current value.\n  // the only time it would make sense to pass the initialSelectionStart or\n  // initialSelectionEnd is if you have an input with a value and want to\n  // explicitely start typing with the cursor at 0. Not super common.\n\n  if (element.selectionStart === 0 && element.selectionEnd === 0) {\n    (0, _utils.setSelectionRangeIfNecessary)(element, initialSelectionStart != null ? initialSelectionStart : element.value.length, initialSelectionEnd != null ? initialSelectionEnd : element.value.length);\n  }\n  _dom.fireEvent.paste(element, init);\n  if (!element.readOnly) {\n    const {\n      newValue,\n      newSelectionStart\n    } = (0, _utils.calculateNewValue)(text, element);\n    _dom.fireEvent.input(element, {\n      inputType: 'insertFromPaste',\n      target: {\n        value: newValue\n      }\n    });\n    (0, _utils.setSelectionRangeIfNecessary)(element, {\n      newSelectionStart,\n      newSelectionEnd: newSelectionStart\n    });\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","paste","_dom","require","_utils","element","text","init","initialSelectionStart","initialSelectionEnd","arguments","length","undefined","disabled","TypeError","tagName","eventWrapper","focus","selectionStart","selectionEnd","setSelectionRangeIfNecessary","fireEvent","readOnly","newValue","newSelectionStart","calculateNewValue","input","inputType","target","newSelectionEnd"],"sources":["C:/Users/1000071428/Downloads/01-starting-project (2)/01-starting-project/node_modules/@testing-library/user-event/dist/paste.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.paste = paste;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _utils = require(\"./utils\");\n\nfunction paste(element, text, init, {\n  initialSelectionStart,\n  initialSelectionEnd\n} = {}) {\n  if (element.disabled) return;\n\n  if (typeof element.value === 'undefined') {\n    throw new TypeError(`the current element is of type ${element.tagName} and doesn't have a valid value`);\n  }\n\n  (0, _utils.eventWrapper)(() => element.focus()); // by default, a new element has it's selection start and end at 0\n  // but most of the time when people call \"paste\", they expect it to paste\n  // at the end of the current input value. So, if the selection start\n  // and end are both the default of 0, then we'll go ahead and change\n  // them to the length of the current value.\n  // the only time it would make sense to pass the initialSelectionStart or\n  // initialSelectionEnd is if you have an input with a value and want to\n  // explicitely start typing with the cursor at 0. Not super common.\n\n  if (element.selectionStart === 0 && element.selectionEnd === 0) {\n    (0, _utils.setSelectionRangeIfNecessary)(element, initialSelectionStart != null ? initialSelectionStart : element.value.length, initialSelectionEnd != null ? initialSelectionEnd : element.value.length);\n  }\n\n  _dom.fireEvent.paste(element, init);\n\n  if (!element.readOnly) {\n    const {\n      newValue,\n      newSelectionStart\n    } = (0, _utils.calculateNewValue)(text, element);\n\n    _dom.fireEvent.input(element, {\n      inputType: 'insertFromPaste',\n      target: {\n        value: newValue\n      }\n    });\n\n    (0, _utils.setSelectionRangeIfNecessary)(element, {\n      newSelectionStart,\n      newSelectionEnd: newSelectionStart\n    });\n  }\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,KAAK,GAAGA,KAAK;AAErB,IAAIC,IAAI,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAE1C,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC;AAE/B,SAASF,KAAKA,CAACI,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAG1B;EAAA,IAH4B;IAClCC,qBAAqB;IACrBC;EACF,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACJ,IAAIL,OAAO,CAACQ,QAAQ,EAAE;EAEtB,IAAI,OAAOR,OAAO,CAACL,KAAK,KAAK,WAAW,EAAE;IACxC,MAAM,IAAIc,SAAS,CAAE,kCAAiCT,OAAO,CAACU,OAAQ,iCAAgC,CAAC;EACzG;EAEA,CAAC,CAAC,EAAEX,MAAM,CAACY,YAAY,EAAE,MAAMX,OAAO,CAACY,KAAK,EAAE,CAAC,CAAC,CAAC;EACjD;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIZ,OAAO,CAACa,cAAc,KAAK,CAAC,IAAIb,OAAO,CAACc,YAAY,KAAK,CAAC,EAAE;IAC9D,CAAC,CAAC,EAAEf,MAAM,CAACgB,4BAA4B,EAAEf,OAAO,EAAEG,qBAAqB,IAAI,IAAI,GAAGA,qBAAqB,GAAGH,OAAO,CAACL,KAAK,CAACW,MAAM,EAAEF,mBAAmB,IAAI,IAAI,GAAGA,mBAAmB,GAAGJ,OAAO,CAACL,KAAK,CAACW,MAAM,CAAC;EAC3M;EAEAT,IAAI,CAACmB,SAAS,CAACpB,KAAK,CAACI,OAAO,EAAEE,IAAI,CAAC;EAEnC,IAAI,CAACF,OAAO,CAACiB,QAAQ,EAAE;IACrB,MAAM;MACJC,QAAQ;MACRC;IACF,CAAC,GAAG,CAAC,CAAC,EAAEpB,MAAM,CAACqB,iBAAiB,EAAEnB,IAAI,EAAED,OAAO,CAAC;IAEhDH,IAAI,CAACmB,SAAS,CAACK,KAAK,CAACrB,OAAO,EAAE;MAC5BsB,SAAS,EAAE,iBAAiB;MAC5BC,MAAM,EAAE;QACN5B,KAAK,EAAEuB;MACT;IACF,CAAC,CAAC;IAEF,CAAC,CAAC,EAAEnB,MAAM,CAACgB,4BAA4B,EAAEf,OAAO,EAAE;MAChDmB,iBAAiB;MACjBK,eAAe,EAAEL;IACnB,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}